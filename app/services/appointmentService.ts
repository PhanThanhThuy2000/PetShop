// app/services/appointmentService.ts - C·∫¨P NH·∫¨T X·ª¨ L√ù L·ªñI H·ª¶Y L·ªäCH H·∫∏N
import { ApiResponse, Appointment, AvailableSlotsResponse, CreateAppointmentRequest, UpdateAppointmentRequest, UpdateAppointmentStatusRequest } from '../types';
import api from '../utils/api-client';

export interface AppointmentSearchParams {
    status?: 'pending' | 'confirmed' | 'in_progress' | 'completed' | 'cancelled';
    page?: number;
    limit?: number;
}

export interface AppointmentListResponse {
    appointments: Appointment[];
    pagination: {
        currentPage: number;
        totalPages: number;
        totalCount: number;
        hasNextPage: boolean;
        hasPrevPage: boolean;
    };
}

// ‚úÖ TH√äM: Interface cho response l·ªói t·ª´ server
export interface AppointmentError {
    success: false;
    message: string;
    data?: {
        currentStatus?: string;
        statusText?: string;
        canCancel?: boolean;
    };
}

export const appointmentService = {
    // T·∫°o l·ªãch h·∫πn m·ªõi
    async createAppointment(data: CreateAppointmentRequest): Promise<ApiResponse<Appointment>> {
        try {
            console.log('üè• Creating appointment:', data);
            const response = await api.post<ApiResponse<Appointment>>('/appointments', data);
            console.log('‚úÖ Appointment created:', response.data);
            return response.data;
        } catch (error: any) {
            console.error('‚ùå Create appointment error:', error.response?.data || error.message);
            throw error;
        }
    },

    // L·∫•y danh s√°ch l·ªãch h·∫πn c·ªßa user
    async getUserAppointments(params: AppointmentSearchParams = {}): Promise<ApiResponse<AppointmentListResponse>> {
        try {
            const queryParams = new URLSearchParams();
            Object.entries(params).forEach(([key, value]) => {
                if (value !== undefined && value !== null) {
                    queryParams.append(key, value.toString());
                }
            });

            const response = await api.get<ApiResponse<AppointmentListResponse>>(
                `/appointments/my-appointments?${queryParams.toString()}`
            );
            return response.data;
        } catch (error: any) {
            console.error('‚ùå Get user appointments error:', error.response?.data || error.message);
            throw error;
        }
    },

    // L·∫•y chi ti·∫øt l·ªãch h·∫πn
    async getAppointmentById(id: string): Promise<ApiResponse<Appointment>> {
        try {
            const response = await api.get<ApiResponse<Appointment>>(`/appointments/${id}`);
            return response.data;
        } catch (error: any) {
            console.error('‚ùå Get appointment by ID error:', error.response?.data || error.message);
            throw error;
        }
    },

    // C·∫≠p nh·∫≠t l·ªãch h·∫πn
    async updateAppointment(id: string, data: UpdateAppointmentRequest): Promise<ApiResponse<Appointment>> {
        try {
            console.log('üîÑ Updating appointment:', id, data);
            const response = await api.put<ApiResponse<Appointment>>(`/appointments/${id}`, data);
            console.log('‚úÖ Appointment updated:', response.data);
            return response.data;
        } catch (error: any) {
            console.error('‚ùå Update appointment error:', error.response?.data || error.message);
            throw error;
        }
    },

    // ‚úÖ C·∫¨P NH·∫¨T: H·ªßy l·ªãch h·∫πn v·ªõi x·ª≠ l√Ω l·ªói chi ti·∫øt h∆°n
    async cancelAppointment(id: string): Promise<ApiResponse<Appointment>> {
        try {
            console.log('‚ùå Cancelling appointment:', id);
            const response = await api.patch<ApiResponse<Appointment>>(`/appointments/${id}/cancel`);
            console.log('‚úÖ Appointment cancelled:', response.data);
            return response.data;
        } catch (error: any) {
            console.error('‚ùå Cancel appointment error:', {
                id,
                status: error.response?.status,
                statusText: error.response?.statusText,
                data: error.response?.data,
                message: error.message
            });

            // ‚úÖ X·ª≠ l√Ω c√°c lo·∫°i l·ªói c·ª• th·ªÉ
            if (error.response?.data) {
                const errorData = error.response.data as AppointmentError;

                // N·∫øu server tr·∫£ v·ªÅ th√¥ng b√°o l·ªói c·ª• th·ªÉ, s·ª≠ d·ª•ng n√≥
                if (errorData.message) {
                    throw new Error(errorData.message);
                }
            }

            // ‚úÖ X·ª≠ l√Ω theo status code
            switch (error.response?.status) {
                case 400:
                    throw new Error(
                        error.response.data?.message ||
                        'Kh√¥ng th·ªÉ h·ªßy l·ªãch h·∫πn. Vui l√≤ng ki·ªÉm tra tr·∫°ng th√°i l·ªãch h·∫πn.'
                    );
                case 401:
                    throw new Error('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y.');
                case 403:
                    throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy l·ªãch h·∫πn n√†y.');
                case 404:
                    throw new Error('Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn ho·∫∑c l·ªãch h·∫πn kh√¥ng thu·ªôc v·ªÅ b·∫°n.');
                case 409:
                    throw new Error('L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c h·ªßy ho·∫∑c c√≥ xung ƒë·ªôt tr·∫°ng th√°i.');
                case 500:
                    throw new Error('L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá h·ªó tr·ª£.');
                default:
                    // L·ªói network ho·∫∑c timeout
                    if (error.code === 'NETWORK_ERROR' || error.message.includes('timeout')) {
                        throw new Error('L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet v√† th·ª≠ l·∫°i.');
                    }

                    throw new Error(
                        error.response?.data?.message ||
                        'Kh√¥ng th·ªÉ h·ªßy l·ªãch h·∫πn. Vui l√≤ng th·ª≠ l·∫°i sau.'
                    );
            }
        }
    },

    // L·∫•y khung gi·ªù tr·ªëng
    async getAvailableSlots(date: string): Promise<ApiResponse<AvailableSlotsResponse>> {
        try {
            console.log('üïí Getting available slots for date:', date);
            const response = await api.get<ApiResponse<AvailableSlotsResponse>>(
                `/appointments/available-slots?date=${date}`
            );
            console.log('‚úÖ Available slots:', response.data);
            return response.data;
        } catch (error: any) {
            console.error('‚ùå Get available slots error:', error.response?.data || error.message);
            throw error;
        }
    },

    // ‚úÖ TH√äM: Ki·ªÉm tra xem c√≥ th·ªÉ h·ªßy l·ªãch h·∫πn kh√¥ng (client-side validation)
    canCancelAppointment(appointment: Appointment): { allowed: boolean; message: string; isLateCancel?: boolean } {
        // Ch·ªâ cho ph√©p h·ªßy khi status l√† 'pending'
        if (appointment.status !== 'pending') {
            let message = '';
            switch (appointment.status) {
                case 'confirmed':
                    message = 'L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n v√† kh√¥ng th·ªÉ h·ªßy tr·ª±c ti·∫øp. Vui l√≤ng li√™n h·ªá ph√≤ng kh√°m ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.';
                    break;
                case 'in_progress':
                    message = 'L·ªãch h·∫πn ƒëang ƒë∆∞·ª£c th·ª±c hi·ªán v√† kh√¥ng th·ªÉ h·ªßy.';
                    break;
                case 'completed':
                    message = 'L·ªãch h·∫πn ƒë√£ ho√†n th√†nh v√† kh√¥ng th·ªÉ h·ªßy.';
                    break;
                case 'cancelled':
                    message = 'L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c h·ªßy tr∆∞·ªõc ƒë√≥.';
                    break;
                default:
                    message = 'Kh√¥ng th·ªÉ h·ªßy l·ªãch h·∫πn ·ªü tr·∫°ng th√°i hi·ªán t·∫°i.';
            }
            return { allowed: false, message };
        }

        // Ki·ªÉm tra th·ªùi gian
        const appointmentDateTime = new Date(`${appointment.appointment_date}T${appointment.appointment_time}`);
        const now = new Date();

        if (appointmentDateTime <= now) {
            return {
                allowed: false,
                message: 'Kh√¥ng th·ªÉ h·ªßy l·ªãch h·∫πn ƒë√£ qua th·ªùi gian ƒë·∫∑t l·ªãch.'
            };
        }

        // Ki·ªÉm tra th·ªùi gian h·ªßy mu·ªôn (trong v√≤ng 2 gi·ªù)
        const twoHoursFromNow = new Date(now.getTime() + 2 * 60 * 60 * 1000);
        const isLateCancel = appointmentDateTime <= twoHoursFromNow;

        return {
            allowed: true,
            message: '',
            isLateCancel
        };
    },

    // ‚úÖ TH√äM: Format status text cho hi·ªÉn th·ªã
    getStatusText(status: string): string {
        switch (status) {
            case 'pending':
                return 'Ch·ªù x√°c nh·∫≠n';
            case 'confirmed':
                return 'ƒê√£ x√°c nh·∫≠n';
            case 'in_progress':
                return 'ƒêang th·ª±c hi·ªán';
            case 'completed':
                return 'Ho√†n th√†nh';
            case 'cancelled':
                return 'ƒê√£ h·ªßy';
            default:
                return status;
        }
    },

    // ‚úÖ TH√äM: Get status color cho UI
    getStatusColor(status: string): string {
        switch (status) {
            case 'pending':
                return '#F59E0B';
            case 'confirmed':
                return '#3B82F6';
            case 'in_progress':
                return '#8B5CF6';
            case 'completed':
                return '#10B981';
            case 'cancelled':
                return '#EF4444';
            default:
                return '#6B7280';
        }
    },

    // ADMIN: L·∫•y t·∫•t c·∫£ l·ªãch h·∫πn
    async getAllAppointments(params: AppointmentSearchParams & { date?: string } = {}): Promise<ApiResponse<AppointmentListResponse>> {
        try {
            const queryParams = new URLSearchParams();
            Object.entries(params).forEach(([key, value]) => {
                if (value !== undefined && value !== null) {
                    queryParams.append(key, value.toString());
                }
            });

            const response = await api.get<ApiResponse<AppointmentListResponse>>(
                `/appointments/admin/all?${queryParams.toString()}`
            );
            return response.data;
        } catch (error: any) {
            console.error('‚ùå Get all appointments error:', error.response?.data || error.message);
            throw error;
        }
    },

    // ADMIN: C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªãch h·∫πn
    async updateAppointmentStatus(id: string, data: UpdateAppointmentStatusRequest): Promise<ApiResponse<Appointment>> {
        try {
            console.log('üîÑ Updating appointment status:', id, data);
            const response = await api.patch<ApiResponse<Appointment>>(`/appointments/admin/${id}/status`, data);
            console.log('‚úÖ Appointment status updated:', response.data);
            return response.data;
        } catch (error: any) {
            console.error('‚ùå Update appointment status error:', error.response?.data || error.message);
            throw error;
        }
    }
};