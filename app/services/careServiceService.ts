// app/services/careServiceService.ts
import { ApiResponse, CareService, CareServiceCategory, CreateCareServiceRequest, UpdateCareServiceRequest } from '../types';
import api from '../utils/api-client';

export interface CareServiceSearchParams {
    category?: 'grooming' | 'health' | 'bathing' | 'spa' | 'other';
    active?: boolean;
}

export const careServiceService = {
    // L·∫•y t·∫•t c·∫£ d·ªãch v·ª• chƒÉm s√≥c
    async getAllServices(params: CareServiceSearchParams = {}): Promise<ApiResponse<CareService[]>> {
        try {
            const queryParams = new URLSearchParams();
            Object.entries(params).forEach(([key, value]) => {
                if (value !== undefined && value !== null) {
                    queryParams.append(key, value.toString());
                }
            });

            console.log('üîç Getting care services with params:', params);
            const response = await api.get<ApiResponse<CareService[]>>(
                `/care-services?${queryParams.toString()}`
            );
            console.log('‚úÖ Care services loaded:', response.data);
            return response.data;
        } catch (error: any) {
            console.error('‚ùå Get care services error:', error.response?.data || error.message);
            throw error;
        }
    },

    // L·∫•y d·ªãch v·ª• theo ID
    async getServiceById(id: string): Promise<ApiResponse<CareService>> {
        try {
            const response = await api.get<ApiResponse<CareService>>(`/care-services/${id}`);
            return response.data;
        } catch (error: any) {
            console.error('‚ùå Get service by ID error:', error.response?.data || error.message);
            throw error;
        }
    },

    // L·∫•y danh s√°ch categories
    async getCategories(): Promise<ApiResponse<CareServiceCategory[]>> {
        try {
            console.log('üîç Getting care service categories');
            const response = await api.get<ApiResponse<CareServiceCategory[]>>('/care-services/categories');
            console.log('‚úÖ Categories loaded:', response.data);
            return response.data;
        } catch (error: any) {
            console.error('‚ùå Get categories error:', error.response?.data || error.message);
            throw error;
        }
    },

    // L·∫•y d·ªãch v·ª• theo category
    async getServicesByCategory(category: string): Promise<ApiResponse<CareService[]>> {
        try {
            console.log('üîç Getting services by category:', category);
            const response = await api.get<ApiResponse<CareService[]>>(`/care-services/category/${category}`);
            console.log('‚úÖ Services by category loaded:', response.data);
            return response.data;
        } catch (error: any) {
            console.error('‚ùå Get services by category error:', error.response?.data || error.message);
            throw error;
        }
    },

    // ADMIN/STAFF: T·∫°o d·ªãch v·ª• m·ªõi
    async createService(data: CreateCareServiceRequest): Promise<ApiResponse<CareService>> {
        try {
            console.log('üÜï Creating care service:', data);
            const response = await api.post<ApiResponse<CareService>>('/care-services', data);
            console.log('‚úÖ Care service created:', response.data);
            return response.data;
        } catch (error: any) {
            console.error('‚ùå Create service error:', error.response?.data || error.message);
            throw error;
        }
    },

    // ADMIN/STAFF: C·∫≠p nh·∫≠t d·ªãch v·ª•
    async updateService(id: string, data: UpdateCareServiceRequest): Promise<ApiResponse<CareService>> {
        try {
            console.log('üîÑ Updating care service:', id, data);
            const response = await api.put<ApiResponse<CareService>>(`/care-services/${id}`, data);
            console.log('‚úÖ Care service updated:', response.data);
            return response.data;
        } catch (error: any) {
            console.error('‚ùå Update service error:', error.response?.data || error.message);
            throw error;
        }
    },

    // ADMIN: X√≥a d·ªãch v·ª•
    async deleteService(id: string): Promise<ApiResponse<void>> {
        try {
            console.log('üóëÔ∏è Deleting care service:', id);
            const response = await api.delete<ApiResponse<void>>(`/care-services/${id}`);
            console.log('‚úÖ Care service deleted');
            return response.data;
        } catch (error: any) {
            console.error('‚ùå Delete service error:', error.response?.data || error.message);
            throw error;
        }
    }
};